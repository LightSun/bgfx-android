---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/11/7 0007 下午 6:28
---
local as = require("fr.AppStarter")
local view = require("fr.View")
local uiCore = require("fr.UiCore")
local bx = require("bx")
local bgfx = require("bgfx")
local math2 = require("core.utils.Math")

require("tests.fr.BaseTest")

local function newRectViewTester()
    local self = view.new("LineViewTester")
    local img;
    local img1;
    local img2;
    local img3;
    local img4;
    local uiMat;

    function self.onInitialize(ctx)
        img = uiCore.newImageFromAssets(ctx, "runtime/images/image3.jpg", 0)
        img1 = uiCore.newImageFromAssets(ctx, "runtime/images/image3.jpg", uiCore.IMAGE_FLAG_GenerateMipmaps)
        img2 = uiCore.newImageFromAssets(ctx, "runtime/images/image3.jpg", uiCore.IMAGE_FLAG_RepeatX | uiCore.IMAGE_FLAG_RepeatY)
        img3 = uiCore.newImageFromAssets(ctx,  "runtime/images/image3.jpg", uiCore.IMAGE_FLAG_FlipY)
        img4 = uiCore.newImageFromAssets(ctx, "runtime/images/image3.jpg", uiCore.IMAGE_FLAG_PreMultiplied)
        uiMat = uiCore.newMat();
    end

    function self.onDestroy()
    end

    function self.onDraw(canvas)
        print("---newTestView: onDraw ----")
        --canvas_lua.h_testDraw(canvas.getContext());
        --self.testImage(canvas);
        --self.testImage2(canvas);
       --self.testImage3(canvas);
        self.testImage4(canvas);
    end

    function self.testImage(canvas)
        canvas
                .drawImage(img, 100, 100)
                .drawImage(img1, 100, 200, 200, 200)
                .drawImage(img2, 100, 400, 200, 200)
                .drawImage(img3, 100, 600, 200, 200)
                .drawImage(img4, 100, 800, 200, 200)

              .drawImage(img, 300, 200, 300, 300)
    end

    function self.testImage2(canvas)
        local w, h = img.size();
        canvas.beginPath()
              .rect(600, 600, w, h)
              .fillColor(nvgRGBA(255,192,0,255))
              .fill();
        canvas.beginPath()
              .rect(100, 100, w, h)
              .fillColor(nvgRGBA(255,192,0,255))
              .fill();
        canvas.save()
                .translate(500, 500)
                .rotate(toRadian(90))
                .drawImage(img, 100, 100)
                .restore()

        canvas.save()
              .translate(500, 500)
              .rotate(toRadian(180))
              .drawImage(img, 100, 100)
              .restore()
    end
    -- with mat . test rotate ok.
    function self.testImage3(canvas)
        local w, h = img.size();
        canvas.drawImage(img, 600, 600)
        uiMat.reset()
             .postTranslate(500, 500)
             .postRotate(90, 600 + w / 2, 600 + h / 2); -- 旋转的中心点是舞台坐标
        canvas.save()
            .setMatrix(uiMat)
            .drawImage(img, 100, 100)
            .restore()
    end

    function self.testImage4(canvas)
        local w, h = img.size();
        canvas.drawImage(img, 600, 600)
        uiMat.reset()
             .postTranslate(500, 500)
             .postRotate(90, 600 + w / 2, 600 + h / 2)
             .postScale(2, 2, 600 + w / 2, 600 + h / 2)
        ; -- 旋转的中心点是舞台坐标
        canvas.save()
              .setMatrix(uiMat)
              .drawImage(img, 100, 100)
              .restore()
    end

    return self;
end
as.startViews(nil, newRectViewTester())