---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2020/8/24 0024 上午 10:38
---

local m = {};

--- wrap user data: for native
---- a.debug = false; (set). local d = a.debug; get
--- for get: a.c -> a.call(a, tostring(c), nil)
--- for set: a.c = v -> a.call(a, tostring(c), v)
function m.wrapGetSet(u)
    if(type(u) == 'userdata') then
        local self = {};
        -- get and set
        local meta = {
            __index = function(t, k)
                print('wrapGetSet', tostring(u), "__index, k =", k);
                return m.wrapGetSet(u.call(u, tostring(k), nil));
            end,
            __newindex = function(t, k, v)
                print('wrapGetSet', tostring(u), "__newindex, k =", k);
                return m.wrapGetSet(u.call(u, tostring(k), v));
            end,
            __tostring = function(t)
                return "wrapper: "..tostring(u);
            end
        };
        setmetatable(self, meta);
        return self;
    else
        --print("only used for user data");
        return u;
    end
end

--- wrap userdata as get
--- a.c -> a.call(a, tostring(c), nil)
function m.wrapGet(u)
    if(type(u) == 'userdata') then
        local self = {};
        -- get
        local meta = {
            __index = function(t, k)
                print('wrapGet: ',tostring(u), "__index, k =", k);
                return m.wrapGetSet(u.call(u, tostring(k), nil));
            end,
            __tostring = function(t)
                return "wrapper: "..tostring(u);
            end
        };
        setmetatable(self, meta);
        return self;
    else
        return u;
    end
end

--- wrap function call to add self as first parameter
--- eg: a.s(b,c,d) -> a.call(a, tostring(s), b, c, d)
function m.wrapCall(u, recursive)
    if(type(u) == 'userdata') then
        local self = {};

        function self._unwrap()
            return u;
        end

        local meta = {
            __index = function(t, k, ...)
                print('wrapCall: ',tostring(u), "__index, k =", k);
                local func = function(...)
                    local p = {...};
                    if(recursive) then
                        return m.wrapCall(u.call(u, tostring(k), table.unpack(p)), recursive);
                    else
                        u.call(u, tostring(k), table.unpack(p))
                        return self;
                    end
                end
                return func;
            end,
            __tostring = function(t)
                return "wrapper: "..tostring(u);
            end
        };
        setmetatable(self, meta)
        return self;
    else
        return u;
    end
end

return m;